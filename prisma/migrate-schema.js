const { PrismaClient } = require('../generated/prisma');

const prisma = new PrismaClient();

async function migrateSchema() {
  try {
    console.log('üîÑ D√©but de la migration du sch√©ma...');

    // 1. Cr√©er les types de cong√©s par d√©faut
    console.log('üìù Cr√©ation des types de cong√©s par d√©faut...');
    
    const leaveTypes = [
      {
        name: 'Cong√© annuel pay√©',
        description: 'Cong√© annuel standard',
        annualQuota: 18,
        remuneration: true
      },
      {
        name: 'Cong√© maladie',
        description: 'Cong√© pour maladie',
        annualQuota: 180,
        remuneration: true
      },
      {
        name: 'Cong√© maternit√©',
        description: 'Cong√© de maternit√©',
        annualQuota: 98,
        remuneration: true
      },
      {
        name: 'Cong√© paternit√©',
        description: 'Cong√© de paternit√©',
        annualQuota: 3,
        remuneration: true
      },
      {
        name: 'Cong√© sans solde',
        description: 'Cong√© non r√©mun√©r√©',
        annualQuota: 0,
        remuneration: false
      }
    ];

    for (const leaveType of leaveTypes) {
      await prisma.leaveType.upsert({
        where: { name: leaveType.name },
        update: {},
        create: leaveType
      });
    }

    console.log('‚úÖ Types de cong√©s cr√©√©s avec succ√®s');

    // 2. R√©cup√©rer tous les utilisateurs
    console.log('üë• R√©cup√©ration des utilisateurs...');
    const users = await prisma.user.findMany();
    console.log(`‚úÖ ${users.length} utilisateurs trouv√©s`);

    // 3. Cr√©er les soldes de cong√©s pour chaque utilisateur
    console.log('üí∞ Cr√©ation des soldes de cong√©s...');
    const allLeaveTypes = await prisma.leaveType.findMany();
    
    for (const user of users) {
      for (const leaveType of allLeaveTypes) {
        await prisma.leaveBalance.upsert({
          where: {
            userId_leaveTypeId: {
              userId: user.id,
              leaveTypeId: leaveType.id
            }
          },
          update: {},
          create: {
            userId: user.id,
            leaveTypeId: leaveType.id,
            balance: leaveType.annualQuota
          }
        });
      }
    }

    console.log('‚úÖ Soldes de cong√©s cr√©√©s avec succ√®s');

    // 4. Mettre √† jour les cong√©s existants
    console.log('üìÖ Mise √† jour des cong√©s existants...');
    const leaves = await prisma.leave.findMany();
    
    // Trouver le type de cong√© annuel par d√©faut
    const annualLeaveType = await prisma.leaveType.findFirst({
      where: { name: 'Cong√© annuel pay√©' }
    });

    for (const leave of leaves) {
      await prisma.leave.update({
        where: { id: leave.id },
        data: {
          leaveTypeId: annualLeaveType.id
        }
      });
    }

    console.log(`‚úÖ ${leaves.length} cong√©s mis √† jour`);

    console.log('üéâ Migration termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

migrateSchema(); 